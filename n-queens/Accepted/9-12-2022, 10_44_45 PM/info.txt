{"id":798078671,"lang":"python3","time":"1Â month","timestamp":1663001085,"status_display":"Accepted","runtime":"106 ms","url":"/submissions/detail/798078671/","is_pending":"Not Pending","title":"N-Queens","memory":"14.4 MB","code":"class Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        #we have to check 3 things\n        col=set()\n        posDiag=set() #r+c\n        negDiag=set() #r-c \n        \n        \n        res=[]\n        board=[[\".\"]*n for i in range(n)]\n        \n        def backTrack(r):\n            if r==n:\n                m=[''.join(row) for row in board]\n                res.append(m)\n                return\n            \n            for c in range(n):\n                if c in col or  (r+c) in posDiag or (r-c ) in negDiag:\n                    continue\n                \n                col.add(c)\n                posDiag.add(r+c)\n                negDiag.add(r-c)\n                board[r][c]=\"Q\"\n                \n                backTrack(r+1)\n                \n                col.remove(c)\n                posDiag.remove(r+c)\n                negDiag.remove(r-c)\n                board[r][c]=\".\"\n                \n                \n        backTrack(0)\n        return res\n            ","compare_result":"111111111","title_slug":"n-queens"}